#!/bin/bash

# Script de correction des permissions KAZARIA
# √Ä ex√©cuter sur le serveur de production

echo "üîß Correction des permissions KAZARIA"
echo "======================================"
echo ""

# Couleurs pour le terminal
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# D√©tecter le chemin du projet
if [ -z "$1" ]; then
    PROJECT_PATH="$(pwd)"
    echo -e "${YELLOW}Aucun chemin sp√©cifi√©, utilisation du r√©pertoire courant${NC}"
else
    PROJECT_PATH="$1"
fi

echo "üìÇ Chemin du projet : $PROJECT_PATH"
echo ""

# V√©rifier que nous sommes dans un projet Laravel
if [ ! -f "$PROJECT_PATH/artisan" ]; then
    echo -e "${RED}‚ùå Erreur : Ce n'est pas un projet Laravel !${NC}"
    echo "Usage: ./fix-permissions.sh [chemin_du_projet]"
    exit 1
fi

cd "$PROJECT_PATH" || exit 1

# D√©tecter l'utilisateur du serveur web
WEB_USER=$(ps aux | grep -E '(apache|httpd|nginx)' | grep -v root | head -1 | awk '{print $1}')
if [ -z "$WEB_USER" ]; then
    WEB_USER="www-data"
fi

echo "üë§ Utilisateur web d√©tect√© : $WEB_USER"
echo ""

# 1. Cr√©er les dossiers manquants
echo "1Ô∏è‚É£  Cr√©ation des dossiers n√©cessaires..."
mkdir -p storage/framework/sessions
mkdir -p storage/framework/views
mkdir -p storage/framework/cache
mkdir -p storage/framework/cache/data
mkdir -p storage/logs
mkdir -p storage/app/public
mkdir -p storage/app/public/stores/logos
mkdir -p storage/app/public/stores/banners
mkdir -p storage/app/public/products
mkdir -p storage/app/public/profiles
mkdir -p bootstrap/cache
echo -e "${GREEN}‚úÖ Dossiers cr√©√©s${NC}"
echo ""

# 2. Permissions des fichiers et dossiers
echo "2Ô∏è‚É£  Ajustement des permissions..."

# Permissions pour tous les fichiers (644)
echo "   üìÑ Fichiers -> 644"
find . -type f -exec chmod 644 {} \;

# Permissions pour tous les dossiers (755)
echo "   üìÅ Dossiers -> 755"
find . -type d -exec chmod 755 {} \;

# Permissions sp√©ciales pour storage et cache (775)
echo "   üîí Storage et cache -> 775"
chmod -R 775 storage
chmod -R 775 bootstrap/cache

# Rendre artisan ex√©cutable
chmod +x artisan
echo -e "${GREEN}‚úÖ Permissions ajust√©es${NC}"
echo ""

# 3. Propri√©taire des fichiers
echo "3Ô∏è‚É£  Ajustement du propri√©taire..."

CURRENT_USER=$(whoami)
echo "   üë§ Utilisateur actuel : $CURRENT_USER"
echo "   üåê Utilisateur web : $WEB_USER"

# Si on a les droits sudo
if [ "$EUID" -eq 0 ]; then
    # Nous sommes root, on peut tout changer
    echo "   üîì Mode root - Changement complet"
    chown -R $WEB_USER:$WEB_USER .
    chown -R $WEB_USER:$WEB_USER storage
    chown -R $WEB_USER:$WEB_USER bootstrap/cache
    echo -e "${GREEN}‚úÖ Propri√©taire chang√©${NC}"
else
    # Nous ne sommes pas root, essayons avec sudo
    if command -v sudo &> /dev/null; then
        echo "   üîê Utilisation de sudo..."
        
        # Demander confirmation
        read -p "   Voulez-vous utiliser sudo pour changer le propri√©taire ? (o/N) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Oo]$ ]]; then
            sudo chown -R $WEB_USER:$WEB_USER storage
            sudo chown -R $WEB_USER:$WEB_USER bootstrap/cache
            
            # Garder l'utilisateur actuel propri√©taire, mais ajouter le groupe web
            sudo chown -R $CURRENT_USER:$WEB_USER .
            echo -e "${GREEN}‚úÖ Propri√©taire ajust√© avec sudo${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Propri√©taire non modifi√© (n√©cessite sudo)${NC}"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Sudo non disponible - Propri√©taire non modifi√©${NC}"
        echo "   Ex√©cutez manuellement :"
        echo "   sudo chown -R $WEB_USER:$WEB_USER storage bootstrap/cache"
    fi
fi
echo ""

# 4. V√©rification SELinux (si pr√©sent)
if command -v getenforce &> /dev/null; then
    if [ "$(getenforce)" != "Disabled" ]; then
        echo "4Ô∏è‚É£  Configuration SELinux d√©tect√©e..."
        echo "   üìã Ajustement du contexte SELinux..."
        
        if [ "$EUID" -eq 0 ] || command -v sudo &> /dev/null; then
            if [ "$EUID" -eq 0 ]; then
                semanage fcontext -a -t httpd_sys_rw_content_t "storage(/.*)?"
                semanage fcontext -a -t httpd_sys_rw_content_t "bootstrap/cache(/.*)?"
                restorecon -Rv storage
                restorecon -Rv bootstrap/cache
            else
                sudo semanage fcontext -a -t httpd_sys_rw_content_t "storage(/.*)?"
                sudo semanage fcontext -a -t httpd_sys_rw_content_t "bootstrap/cache(/.*)?"
                sudo restorecon -Rv storage
                sudo restorecon -Rv bootstrap/cache
            fi
            echo -e "${GREEN}‚úÖ SELinux configur√©${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Ex√©cutez manuellement :${NC}"
            echo "   sudo semanage fcontext -a -t httpd_sys_rw_content_t 'storage(/.*)?'"
            echo "   sudo restorecon -Rv storage"
        fi
        echo ""
    fi
fi

# 5. Cr√©er le lien symbolique storage
echo "5Ô∏è‚É£  Configuration du lien symbolique storage..."
if [ -L "public/storage" ]; then
    echo "   ‚ÑπÔ∏è  Lien symbolique existe d√©j√†"
elif [ -d "public/storage" ]; then
    echo "   ‚ö†Ô∏è  public/storage est un dossier, sauvegarde et suppression..."
    mv public/storage public/storage_backup_$(date +%s)
    php artisan storage:link
    echo -e "${GREEN}‚úÖ Lien symbolique cr√©√©${NC}"
else
    php artisan storage:link
    echo -e "${GREEN}‚úÖ Lien symbolique cr√©√©${NC}"
fi
echo ""

# 6. Nettoyer le cache
echo "6Ô∏è‚É£  Nettoyage du cache..."
php artisan cache:clear 2>/dev/null || echo "   Cache d√©j√† vide"
php artisan config:clear 2>/dev/null || echo "   Config d√©j√† vid√©e"
php artisan view:clear 2>/dev/null || echo "   Vues d√©j√† vid√©es"
php artisan route:clear 2>/dev/null || echo "   Routes d√©j√† vid√©es"
echo -e "${GREEN}‚úÖ Cache nettoy√©${NC}"
echo ""

# 7. V√©rification finale
echo "7Ô∏è‚É£  V√©rification finale..."
echo ""

# V√©rifier les permissions critiques
CRITICAL_DIRS=(
    "storage/framework/sessions"
    "storage/framework/views"
    "storage/framework/cache"
    "storage/logs"
    "bootstrap/cache"
)

ALL_OK=true
for dir in "${CRITICAL_DIRS[@]}"; do
    if [ -w "$dir" ]; then
        echo -e "   ${GREEN}‚úÖ${NC} $dir - Inscriptible"
    else
        echo -e "   ${RED}‚ùå${NC} $dir - Non inscriptible"
        ALL_OK=false
    fi
done

echo ""

# Test d'√©criture
TEST_FILE="storage/logs/permission_test_$(date +%s).txt"
if echo "test" > "$TEST_FILE" 2>/dev/null; then
    echo -e "${GREEN}‚úÖ Test d'√©criture : SUCC√àS${NC}"
    rm "$TEST_FILE"
else
    echo -e "${RED}‚ùå Test d'√©criture : √âCHEC${NC}"
    ALL_OK=false
fi

echo ""
echo "======================================"

if [ "$ALL_OK" = true ]; then
    echo -e "${GREEN}üéâ Toutes les permissions sont correctes !${NC}"
    echo ""
    echo "‚úÖ Vous pouvez maintenant :"
    echo "   - Acc√©der √† votre site"
    echo "   - Uploader des images"
    echo "   - Voir les vues compil√©es"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Certaines permissions n√©cessitent encore attention${NC}"
    echo ""
    echo "üìù Actions recommand√©es :"
    echo "   1. Ex√©cutez ce script avec sudo :"
    echo "      sudo ./fix-permissions.sh"
    echo ""
    echo "   2. Ou ajustez manuellement :"
    echo "      sudo chown -R $WEB_USER:$WEB_USER storage bootstrap/cache"
    echo "      sudo chmod -R 775 storage bootstrap/cache"
fi

echo ""
echo "üìã Commandes utiles :"
echo "   - V√©rifier les permissions : ls -la storage"
echo "   - V√©rifier les logs : tail -f storage/logs/laravel.log"
echo "   - Nettoyer le cache : php artisan optimize:clear"
echo ""
